#!/bin/bash

die() {
	printf "\n#####\n%s\n#####\n" "$1"
	exit 1
}

_webapp_config_weblate_install_hook() {

	# Define our variables to replace:
	WEBLATE_APPNAME="${VHOST_APPDIR#/}"
	WEBLATE_USER="${VHOST_SERVER_UID}"
	WEBLATE_GROUP="${VHOST_SERVER_GID}"

	WEBLATE_ROOT="${VHOST_ROOT}/${WEBLATE_APPNAME}"
	WEBLATE_CONF="${VHOST_ROOT}/conf/${WEBLATE_APPNAME}"
	WEBLATE_LOGDIR="${VHOST_ROOT}/logs/${WEBLATE_APPNAME}"
	WEBLATE_SOCKET="${VHOST_ROOT}/sockets/${WEBLATE_APPNAME}.uwsgi.sock"

	WEBLATE_PYTHON_ROOT="$WEBLATE_ROOT/weblate"
	WEBLATE_STATIC="$WEBLATE_ROOT/static"
	WEBLATE_MEDIA="$WEBLATE_ROOT/media"


	WEBLATE_DB_NAME="${WEBLATE_APPNAME}"
	WEBLATE_DB_USER="${WEBLATE_APPNAME}"
	WEBLATE_DB_PASSWORD="${WEBLATE_APPNAME}"
	WEBLATE_DB_HOST=""
	WEBLATE_DB_PORT=""
	WEBLATE_ALLOWED_HOSTS="'${VHOST_HOSTNAME}'"

	# Replace all tokens with values of the variable by the same name.
	local myvar
	for myvar in ${!WEBLATE*} ; do
		sed -e "s|${myvar}|${!myvar}|g" -i "${WEBLATE_CONF}/default"/* || die "Couldn't fix config file templates in '${WEBLATE_CONF}/default'."
	done

	# Fix up example.com domain entries.
	sed -e "s|example.com|${VHOST_HOSTNAME}|g" -i "${WEBLATE_CONF}/default"/* || die


	# Copy generated settings file to settings.py if it doesn't exist and set a new secret.
	if ! [ -e "${WEBLATE_CONF}/settings.py" ] ; then
		cp "${WEBLATE_CONF}/default/settings.py" "${WEBLATE_CONF}/settings.py" || die
		local mysecret="$(python -c 'from django.utils.crypto import get_random_string ; chars = '"'"'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'"'"' ; print(get_random_string(50, chars)); ' )"
		[ -z "${mysecret}" ] && die "Could not generate SECRET_KEY!"
		sed -e 's|^\(SECRET_KEY = \).*|\1'"'${mysecret}'"'|' -i "${WEBLATE_CONF}/settings.py" || die
	fi

	# Setup links to settings if they don't exist.
	if ! [ -e "${WEBLATE_PYTHON_ROOT}/settings.py" ] ; then
		printf -- "Configuration file '${WEBLATE_PYTHON_ROOT}/settings.py' doesn't exist.\nLinking to configuration at default location '${WEBLATE_CONF}/settings.py'.\n"
		rm -f "${WEBLATE_PYTHON_ROOT}/settings.py" || die "Could not remove stale link to settings file at '${WEBLATE_PYTHON_ROOT}/settings.py'."
		ln -s "../../conf/${WEBLATE_APPNAME}/settings.py" "${WEBLATE_PYTHON_ROOT}/settings.py" || die "Could not create linke to settings file at '${WEBLATE_PYTHON_ROOT}/settings.py'."
	elif [ -h "${WEBLATE_PYTHON_ROOT}/settings.py" ] ; then
		printf -- "Found exising configuration file link from '${WEBLATE_PYTHON_ROOT}/settings.py' to '$(readlink -e "${WEBLATE_PYTHON_ROOT}/settings.py")'.\n"
	else
		printf -- "Found exising configuration file at '${WEBLATE_PYTHON_ROOT}/settings.py'.\n"
	fi


	local f fn
	for f in "${WEBLATE_CONF}/default"/* ; do
		fn="${f#${WEBLATE_CONF}/default/}"
		if ! [ -e "${WEBLATE_CONF}/${fn}" ] ; then
			printf -- "Configuration file ${fn} doesn't exist:\nLinking to default configuration 'default/${fn}'.\n"
			ln -sf "default/$fn" "${WEBLATE_CONF}/${fn}" || die "Could not create link to 'default/$fn' at '${WEBLATE_CONF}/${fn}'."
		elif [ -h "${WEBLATE_CONF}/${fn}" ] ; then
			printf -- "Found exising configuration file link from '${WEBLATE_CONF}/${fn}' to '$(readlink -e "${WEBLATE_CONF}/${fn}")'.\n"
		else
			printf -- "Found exising configuration file at '${WEBLATE_CONF}/${fn}'.\n"
		fi
	done

}

_webapp_config_weblate_clean_hook() {
	echo "$1"
}

case "$1" in
	install) _webapp_config_weblate_install_hook ;;
	clean) _webapp_config_weblate_clean_hook ;;
	*) die "$0 called with unknown command '$1'!" ;;
esac

